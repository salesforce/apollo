syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.salesfoce.apollo.consortium.proto";
option java_outer_classname = "ConsortiumProto";
option objc_class_prefix = "Cp";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "util.proto";

package apollo.consortium;

service LinearService {
    rpc submit (SubmitTransaction) returns (TransactionResult) {}
    rpc join (Join) returns (JoinResult) {} 
    rpc stopData(StopData) returns (google.protobuf.Empty){}
}

message Join {
    utils.Digeste context = 1;
    ViewMember member = 2;
}

message JoinResult {
    utils.Sig signature = 1;
    ViewMember nextView = 2;
}

message SubmitTransaction {
    utils.Digeste context = 1;
    Transaction transaction = 2;
}

message TransactionResult {
}

message CertifiedBlock {
    Block block = 1;
    repeated Certification certifications = 2;
}

message Block {
    utils.Digeste headerHash = 1;
    Header header = 2;
    Body body = 3;
}

message Header {
    int64 height = 1; 
    int64 lastCheckpoint = 2;
    int64 lastReconfig = 3;
    google.protobuf.Timestamp timestamp = 4;
    utils.Digeste lastCheckpointHash = 5;
    utils.Digeste lastReconfigHash = 6;
    utils.Digeste nonce = 7;
    utils.Digeste previous = 8;
    utils.Digeste bodyHash = 9;
}

message Body {
    BodyType type = 1;
    bytes contents = 2;
}

message Certification {
    utils.Digeste id = 1;
    utils.Sig signature = 2;
}

message Certifications {
    repeated Certification certs = 1;
}

enum BodyType {
    GENESIS = 0;
    USER = 1;
    RECONFIGURE = 2;
    CHECKPOINT = 3;
}

message Genesis {
    google.protobuf.Any genesisData = 1;
    Reconfigure initialView = 2;
}

message User {
    repeated ExecutedTransaction transactions = 1;
}

message Reconfigure {
    utils.Digeste id = 1;
    int32 checkpointBlocks = 2;
    int32 tolerance = 3;
    repeated ViewMember view = 4;
    repeated ExecutedTransaction transactions = 5;
}

message ByteTransaction {
    bytes content = 1;
}

message JoinTransaction {
    ViewMember member = 1; 
    repeated Certification certification = 2;
}

message ViewMember {
    utils.Digeste id = 1;
    utils.PubKey consensusKey = 2;
    utils.Sig signature = 3;
}

message Checkpoint { 
    int64 byteSize = 1;
    int32 segmentSize = 2;
    utils.Digeste stateHash = 3;
    repeated utils.Digeste segments = 4;
}

message CheckpointProcessing {
    int64 checkpoint = 1;
}

message Transaction {
    bool join = 1;
    utils.Digeste source = 2;
    utils.Digeste nonce = 3;
    utils.Sig signature = 4;
    google.protobuf.Any txn = 5;
}

message ExecutedTransaction {
    utils.Digeste hash = 1;
    Transaction transaction = 2;
}

message Validate {
    utils.Digeste context = 1;
    utils.Digeste id = 2;
    utils.Digeste hash = 3;
    utils.Sig signature = 4;
}

message Stop { 
    int32 nextRegent = 1;
    utils.Digeste context = 2;
    repeated Transaction transactions = 3;
}

message StopData {
    utils.Digeste context = 1;
    int32 currentRegent = 2;
    repeated CertifiedBlock blocks = 3;
}

message Sync {
    utils.Digeste context = 1;
    int32 currentRegent = 2; 
    repeated CertifiedBlock blocks = 3;
} 

message ReplicateTransactions {
    utils.Digeste context = 1;
    repeated Transaction transactions = 2;
}

/** Bootstrapping **/

service Boostrap {
    rpc sync(Synchronize) returns (Initial) {}
    rpc fetchBlocks(BlockReplication) returns (Blocks) {}
    rpc fetchViewChain(BlockReplication) returns (Blocks) {}
    rpc fetch(CheckpointReplication) returns (CheckpointSegments) {}
}

message Synchronize {
    utils.Digeste context = 1;
    utils.Digeste from = 2;
    int64 height = 3;
}

message Initial {
    CertifiedBlock genesis = 1;
    CertifiedBlock checkpoint = 2;
    CertifiedBlock checkpointView = 3;
    repeated CertifiedBlock viewChain = 4;
}

message BlockReplication {
    utils.Digeste context = 1;
    int64 from = 2;
    int64 to = 3;
    utils.Biff blocksBff = 4;
}

message Blocks {
    repeated CertifiedBlock blocks = 1;
}

message CheckpointReplication {
    utils.Digeste context = 1;
    int64 checkpoint = 2;
    utils.Biff checkpointSegments = 3;
}

message CheckpointSegments {
    repeated Slice segments = 1;
    repeated utils.Digeste blocks = 2;
}

message Slice {
    int32 index = 1;
    bytes block = 2;
}
