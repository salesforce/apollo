syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.salesforce.apollo.choam.proto";
option java_outer_classname = "ChoamProto";
option objc_class_prefix = "Chp";

import "google/protobuf/empty.proto";

import "crypto.proto";
import "stereotomy.proto";

package apollo.choam;

service TransactionSubmission {
  rpc submit (Transaction) returns (SubmitResult) {}
}

service Terminal {
  /* reconfiguration */
  rpc join (SignedViewMember) returns (google.protobuf.Empty) {}

  /* bootstrapping */
  rpc sync(Synchronize) returns (Initial) {}
  rpc fetchBlocks(BlockReplication) returns (Blocks) {}
  rpc fetchViewChain(BlockReplication) returns (Blocks) {}
  rpc fetch(CheckpointReplication) returns (CheckpointSegments) {}
}

message SubmitResult {
  enum Result {
    INVALID_RESULT = 0;
    PUBLISHED = 1;
    BUFFER_FULL = 2;
    INACTIVE = 3;
    NO_COMMITTEE = 4;
    UNAVAILABLE = 6;
    INVALID_SUBMIT = 7;
    ERROR_SUBMITTING = 8;
    RATE_LIMITED = 9;
  }
  Result result = 1;
  string errorMsg = 2;
}

message Block {
  Header header = 1;
  oneof body {
    Genesis genesis = 2;
    Reconfigure reconfigure = 3;
    Checkpoint checkpoint = 4;
    Executions executions = 5;
    Assemble assemble = 6;
  }
}

message Header {
  uint64 height = 1;
  uint64 lastCheckpoint = 2;
  uint64 lastReconfig = 3;
  crypto.Digeste lastCheckpointHash = 4;
  crypto.Digeste lastReconfigHash = 5;
  crypto.Digeste previous = 6;
  crypto.Digeste bodyHash = 7;
}

message Genesis {
  FoundationSeal foundation = 1;
  Reconfigure initialView = 2;
  repeated Transaction initialize = 3;
}

message Reconfigure {
  crypto.Digeste id = 1;
  int32 checkpointTarget = 2;
  repeated Join joins = 3;
}

message Checkpoint {
  int64 byteSize = 1;
  int32 segmentSize = 2;
  int32 count = 3;
  crypto.HexBloome crown = 4;
}

message Executions {
  repeated Transaction executions = 1;
}

message Assemble {
  View view = 1;
}

message FoundationSeal {
  stereotomy.KeyEvent_ foundation = 1;
  crypto.Sig signature = 2;
}

message Transaction {
  crypto.Digeste source = 1;
  int32 nonce = 2;
  bytes content = 3;
  crypto.Sig signature = 4;
}

message UnitData {
  repeated Validate validations = 1;
  repeated Transaction transactions = 2;
  repeated Assemblies assemblies = 3;
}

message Assemblies {
  repeated SignedJoin joins = 1;
  repeated SignedViews views = 2;
}

message Join {
  SignedViewMember member = 1;
  stereotomy.KERL_ kerl = 2;
}

message SignedJoin {
  crypto.Digeste member = 1;
  SignedViewMember join = 2;
  crypto.Sig signature = 3;
}

message SignedViews {
  Views views = 1;
  crypto.Sig signature = 2;
}

message Views {
  crypto.Digeste member = 1;
  crypto.Digeste vid = 2;
  repeated View views = 3;
}

message View {
  crypto.Digeste diadem = 1;
  int32 majority = 2;
  repeated crypto.Digeste committee = 3;
}

message SignedView {
  crypto.Digeste member = 1;
  View view = 2;
  crypto.Sig signature = 3;
}

message ViewMember {
  crypto.Digeste id = 1;
  crypto.Digeste view = 2;
  crypto.Digeste diadem = 3;
  crypto.PubKey consensusKey = 4;
  crypto.Sig signature = 5;
}

message SignedViewMember {
  ViewMember vm = 1;
  crypto.Sig signature = 2;
}

message Certification {
  crypto.Digeste id = 1;
  crypto.Sig signature = 2;
}

message Certifications {
  repeated Certification certs = 1;
}

message CertifiedBlock {
  Block block = 1;
  repeated Certification certifications = 2;
}

message ByteTransaction {
  bytes content = 1;
}

message CheckpointProcessing {
  uint64 checkpoint = 1;
}

message Validate {
  crypto.Digeste hash = 1;
  Certification witness = 2;
}

message Validations {
  repeated Validate validations = 1;
}

message Synchronize {
  crypto.Digeste from = 1;
  uint64 height = 2;
}

message Initial {
  CertifiedBlock genesis = 1;
  CertifiedBlock checkpoint = 2;
  CertifiedBlock checkpointView = 3;
  repeated CertifiedBlock viewChain = 4;
}

message BlockReplication {
  uint64 from = 1;
  uint64 to = 2;
  crypto.Biff blocksBff = 3;
}

message Blocks {
  repeated CertifiedBlock blocks = 1;
}

message CheckpointReplication {
  uint64 checkpoint = 1;
  crypto.Biff checkpointSegments = 2;
}

message CheckpointSegments {
  repeated Slice segments = 1;
  repeated crypto.Digeste blocks = 2;
}

message Slice {
  int32 index = 1;
  bytes block = 2;
}
