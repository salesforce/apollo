syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.salesfoce.apollo.thoth.proto";
option java_outer_classname = "ThothProto";
option objc_class_prefix = "Tp";

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

import "stereotomy.proto";
import "stereotomy-services.proto";
import "util.proto";

package thoth;

service KerlDht {
    rpc append (stereotomy.services.KeyEventsContext) returns (stereotomy.services.KeyStates) {}
    rpc appendKERL (stereotomy.services.KERLContext) returns (stereotomy.services.KeyStates) {}
    rpc appendWithAttachments (stereotomy.services.KeyEventWithAttachmentsContext) returns (stereotomy.services.KeyStates) {}
    rpc appendAttachments (stereotomy.services.AttachmentsContext) returns (google.protobuf.Empty) {}
    rpc appendValidations (stereotomy.services.ValidationsContext) returns (google.protobuf.Empty) {}
    
    rpc getAttachment (stereotomy.services.EventContext) returns (stereotomy.Attachment) {}
    rpc getKeyEventCoords (stereotomy.services.EventContext) returns (stereotomy.KeyEvent_) {}
    rpc getKeyState (stereotomy.services.IdentifierContext) returns (stereotomy.KeyState_) {}
    rpc getKeyStateCoords (stereotomy.services.EventContext) returns (stereotomy.KeyState_) {}
    rpc getKeyStateWithAttachments (stereotomy.services.EventContext) returns (stereotomy.KeyStateWithAttachments_) {}
    rpc getKeyStateWithEndorsementsAndValidations (stereotomy.services.EventContext) returns (stereotomy.KeyStateWithEndorsementsAndValidations_) {}
    rpc getKERL (stereotomy.services.IdentifierContext) returns (stereotomy.KERL_) {}
    rpc getValidations (stereotomy.services.EventContext) returns (stereotomy.Validations) {}
}

service Admissions {
    rpc apply (Registration) returns (SignedNonce) {}
    rpc register(SignedAttestation) returns (Admittance) {}
}

service AdmissionsReplication {
    rpc gossip (AdminGossip) returns (AdminUpdate) {}
    rpc update (AdminUpdate) returns (google.protobuf.Empty) {}
}

service Delegated {
    rpc reconcile ( Intervals ) returns (Update) {}
    rpc update (Updating) returns (google.protobuf.Empty) {}
}

service Reconciliation {
    rpc reconcile ( Intervals ) returns (Update) {}
    rpc update (Updating) returns (google.protobuf.Empty) {}
}

message Update {
    repeated stereotomy.KeyEvent_ events = 1;
    repeated Interval intervals = 2;
    utils.Biff have = 3;
}

message Updating {
    utils.Digeste context = 1;
    int32 ring = 2;
    repeated stereotomy.KeyEvent_ events = 3; 
}

message Intervals {
    utils.Digeste context = 1;
    int32 ring = 2;
    repeated Interval intervals = 3;
    utils.Biff have = 4;
} 

message Get {
    utils.Digeste context = 1;
    utils.Digeste identifier = 2;
} 

message Interval {
    utils.Digeste start = 1;
    utils.Digeste end = 2;
}

message Registration {
    utils.Digeste context = 1;
    stereotomy.Ident identity = 2;
    stereotomy.KERL_ kerl = 3;
}

message Nonce {
    stereotomy.Ident member = 1;
    stereotomy.EventCoords issuer = 2;
    utils.Digeste noise = 3;
    google.protobuf.Timestamp timestamp = 4;
    google.protobuf.Duration duration = 5;
}

message SignedNonce {
    Nonce nonce = 1;
    utils.Sig signature = 2;
}

message Attestation {
    stereotomy.Ident member = 1;
    utils.Sig nonce = 2;
    google.protobuf.Timestamp timestamp = 3;
    google.protobuf.Any attestation = 4;
}

message SignedAttestation {
    utils.Digeste context = 1;
    Attestation attestation = 2;
    utils.Sig signature = 3;
}

message Admittance {
    repeated Validation validations = 1;
}

message AdminGossip {
    utils.Digeste context = 1;
    Have have = 2;
}

message AdminUpdate {
    utils.Digeste context = 1;
    repeated Pending pending = 2;
    repeated SignedProposal proposals = 3;
    repeated SignedEndorsement endorsements = 4;
    repeated SignedDeny deny = 5;
    Have have = 6;
}

message Have {
    utils.Biff pending = 1;
    utils.Biff proposals = 2;
    utils.Biff endorsements = 3;
    utils.Biff denies = 4;
}

message Pending {
    stereotomy.KERL_ kerl = 1;
    SignedNonce pending = 2;
}

message Endorsement {
    utils.Digeste endorser = 1;
    SignedNonce nonce = 2;
    Validation validation = 3;
}

message Validation {
    stereotomy.EventCoords coordinates = 1;
    utils.Sig signature = 2;
}

message SignedEndorsement {
    Endorsement endorsement = 1;
    utils.Sig signature = 2;
}

message Deny {
    utils.Digeste denier = 1;
    SignedNonce nonce = 2;
}

message SignedDeny {
    Deny denial = 1;
    utils.Sig signature = 2;
}

message Proposal {
    utils.Digeste proposer = 1;
    SignedNonce nonce = 2;
    SignedAttestation  attestation = 3;
}

message SignedProposal {
    Proposal proposal = 1;
    utils.Sig signature = 2;
}

