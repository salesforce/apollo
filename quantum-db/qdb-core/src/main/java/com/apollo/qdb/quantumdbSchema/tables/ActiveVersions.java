/*
 * This file is generated by jOOQ.
 */
package com.apollo.qdb.quantumdbSchema.tables;


import com.apollo.qdb.quantumdbSchema.Keys;
import com.apollo.qdb.quantumdbSchema.Quantumdb;
import com.apollo.qdb.quantumdbSchema.tables.records.ActiveVersionsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActiveVersions extends TableImpl<ActiveVersionsRecord> {

    private static final long serialVersionUID = -1967968071;

    /**
     * The reference instance of <code>QUANTUMDB.ACTIVE_VERSIONS</code>
     */
    public static final ActiveVersions ACTIVE_VERSIONS = new ActiveVersions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActiveVersionsRecord> getRecordType() {
        return ActiveVersionsRecord.class;
    }

    /**
     * The column <code>QUANTUMDB.ACTIVE_VERSIONS.VERSION_ID</code>.
     */
    public final TableField<ActiveVersionsRecord, String> VERSION_ID = createField(DSL.name("VERSION_ID"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * Create a <code>QUANTUMDB.ACTIVE_VERSIONS</code> table reference
     */
    public ActiveVersions() {
        this(DSL.name("ACTIVE_VERSIONS"), null);
    }

    /**
     * Create an aliased <code>QUANTUMDB.ACTIVE_VERSIONS</code> table reference
     */
    public ActiveVersions(String alias) {
        this(DSL.name(alias), ACTIVE_VERSIONS);
    }

    /**
     * Create an aliased <code>QUANTUMDB.ACTIVE_VERSIONS</code> table reference
     */
    public ActiveVersions(Name alias) {
        this(alias, ACTIVE_VERSIONS);
    }

    private ActiveVersions(Name alias, Table<ActiveVersionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActiveVersions(Name alias, Table<ActiveVersionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ActiveVersions(Table<O> child, ForeignKey<O, ActiveVersionsRecord> key) {
        super(child, key, ACTIVE_VERSIONS);
    }

    @Override
    public Schema getSchema() {
        return Quantumdb.QUANTUMDB;
    }

    @Override
    public UniqueKey<ActiveVersionsRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_FC;
    }

    @Override
    public List<UniqueKey<ActiveVersionsRecord>> getKeys() {
        return Arrays.<UniqueKey<ActiveVersionsRecord>>asList(Keys.CONSTRAINT_FC);
    }

    @Override
    public List<ForeignKey<ActiveVersionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ActiveVersionsRecord, ?>>asList(Keys.ACTIVE_VERSIONS_VERSION_ID);
    }

    public Changelog changelog() {
        return new Changelog(this, Keys.ACTIVE_VERSIONS_VERSION_ID);
    }

    @Override
    public ActiveVersions as(String alias) {
        return new ActiveVersions(DSL.name(alias), this);
    }

    @Override
    public ActiveVersions as(Name alias) {
        return new ActiveVersions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActiveVersions rename(String name) {
        return new ActiveVersions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActiveVersions rename(Name name) {
        return new ActiveVersions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
