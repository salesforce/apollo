/*
 * This file is generated by jOOQ.
 */
package com.apollo.qdb.quantumdbSchema.tables;


import com.apollo.qdb.quantumdbSchema.Keys;
import com.apollo.qdb.quantumdbSchema.Quantumdb;
import com.apollo.qdb.quantumdbSchema.tables.records.ChangelogRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Changelog extends TableImpl<ChangelogRecord> {

    private static final long serialVersionUID = 1741230019;

    /**
     * The reference instance of <code>QUANTUMDB.CHANGELOG</code>
     */
    public static final Changelog CHANGELOG = new Changelog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChangelogRecord> getRecordType() {
        return ChangelogRecord.class;
    }

    /**
     * The column <code>QUANTUMDB.CHANGELOG.VERSION_ID</code>.
     */
    public final TableField<ChangelogRecord, String> VERSION_ID = createField(DSL.name("VERSION_ID"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>QUANTUMDB.CHANGELOG.PARENT_VERSION_ID</code>.
     */
    public final TableField<ChangelogRecord, String> PARENT_VERSION_ID = createField(DSL.name("PARENT_VERSION_ID"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>QUANTUMDB.CHANGELOG.OPERATION_TYPE</code>.
     */
    public final TableField<ChangelogRecord, String> OPERATION_TYPE = createField(DSL.name("OPERATION_TYPE"), org.jooq.impl.SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>QUANTUMDB.CHANGELOG.OPERATION</code>.
     */
    public final TableField<ChangelogRecord, String> OPERATION = createField(DSL.name("OPERATION"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>QUANTUMDB.CHANGELOG</code> table reference
     */
    public Changelog() {
        this(DSL.name("CHANGELOG"), null);
    }

    /**
     * Create an aliased <code>QUANTUMDB.CHANGELOG</code> table reference
     */
    public Changelog(String alias) {
        this(DSL.name(alias), CHANGELOG);
    }

    /**
     * Create an aliased <code>QUANTUMDB.CHANGELOG</code> table reference
     */
    public Changelog(Name alias) {
        this(alias, CHANGELOG);
    }

    private Changelog(Name alias, Table<ChangelogRecord> aliased) {
        this(alias, aliased, null);
    }

    private Changelog(Name alias, Table<ChangelogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Changelog(Table<O> child, ForeignKey<O, ChangelogRecord> key) {
        super(child, key, CHANGELOG);
    }

    @Override
    public Schema getSchema() {
        return Quantumdb.QUANTUMDB;
    }

    @Override
    public UniqueKey<ChangelogRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_F;
    }

    @Override
    public List<UniqueKey<ChangelogRecord>> getKeys() {
        return Arrays.<UniqueKey<ChangelogRecord>>asList(Keys.CONSTRAINT_F);
    }

    @Override
    public List<ForeignKey<ChangelogRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ChangelogRecord, ?>>asList(Keys.CHANGELOG_PARENT_VERSION_ID);
    }

    public Changelog changelog() {
        return new Changelog(this, Keys.CHANGELOG_PARENT_VERSION_ID);
    }

    @Override
    public List<Check<ChangelogRecord>> getChecks() {
        return Arrays.<Check<ChangelogRecord>>asList(
              Internal.createCheck(this, DSL.name("CHANGELOG_NO_SELF_REFERENCE"), "(\"VERSION_ID\" <> \"PARENT_VERSION_ID\")", true)
        );
    }

    @Override
    public Changelog as(String alias) {
        return new Changelog(DSL.name(alias), this);
    }

    @Override
    public Changelog as(Name alias) {
        return new Changelog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Changelog rename(String name) {
        return new Changelog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Changelog rename(Name name) {
        return new Changelog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
