/*
 * This file is generated by jOOQ.
 */
package com.apollo.qdb.quantumdbSchema.tables;


import com.apollo.qdb.quantumdbSchema.Keys;
import com.apollo.qdb.quantumdbSchema.Quantumdb;
import com.apollo.qdb.quantumdbSchema.tables.records.ChangesetsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Changesets extends TableImpl<ChangesetsRecord> {

    private static final long serialVersionUID = 1900992064;

    /**
     * The reference instance of <code>QUANTUMDB.CHANGESETS</code>
     */
    public static final Changesets CHANGESETS = new Changesets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChangesetsRecord> getRecordType() {
        return ChangesetsRecord.class;
    }

    /**
     * The column <code>QUANTUMDB.CHANGESETS.ID</code>.
     */
    public final TableField<ChangesetsRecord, String> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>QUANTUMDB.CHANGESETS.VERSION_ID</code>.
     */
    public final TableField<ChangesetsRecord, String> VERSION_ID = createField(DSL.name("VERSION_ID"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>QUANTUMDB.CHANGESETS.AUTHOR</code>.
     */
    public final TableField<ChangesetsRecord, String> AUTHOR = createField(DSL.name("AUTHOR"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>QUANTUMDB.CHANGESETS.CREATED</code>.
     */
    public final TableField<ChangesetsRecord, OffsetDateTime> CREATED = createField(DSL.name("CREATED"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.precision(6).nullable(false).defaultValue(org.jooq.impl.DSL.field("NOW()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>QUANTUMDB.CHANGESETS.DESCRIPTION</code>.
     */
    public final TableField<ChangesetsRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>QUANTUMDB.CHANGESETS.ALIAS</code>.
     */
    public final TableField<ChangesetsRecord, String> ALIAS = createField(DSL.name("ALIAS"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>QUANTUMDB.CHANGESETS</code> table reference
     */
    public Changesets() {
        this(DSL.name("CHANGESETS"), null);
    }

    /**
     * Create an aliased <code>QUANTUMDB.CHANGESETS</code> table reference
     */
    public Changesets(String alias) {
        this(DSL.name(alias), CHANGESETS);
    }

    /**
     * Create an aliased <code>QUANTUMDB.CHANGESETS</code> table reference
     */
    public Changesets(Name alias) {
        this(alias, CHANGESETS);
    }

    private Changesets(Name alias, Table<ChangesetsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Changesets(Name alias, Table<ChangesetsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Changesets(Table<O> child, ForeignKey<O, ChangesetsRecord> key) {
        super(child, key, CHANGESETS);
    }

    @Override
    public Schema getSchema() {
        return Quantumdb.QUANTUMDB;
    }

    @Override
    public UniqueKey<ChangesetsRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_9;
    }

    @Override
    public List<UniqueKey<ChangesetsRecord>> getKeys() {
        return Arrays.<UniqueKey<ChangesetsRecord>>asList(Keys.CONSTRAINT_9, Keys.CHANGESETS_VERSION_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<ChangesetsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ChangesetsRecord, ?>>asList(Keys.CHANGESETS_VERSION_ID);
    }

    public Changelog changelog() {
        return new Changelog(this, Keys.CHANGESETS_VERSION_ID);
    }

    @Override
    public Changesets as(String alias) {
        return new Changesets(DSL.name(alias), this);
    }

    @Override
    public Changesets as(Name alias) {
        return new Changesets(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Changesets rename(String name) {
        return new Changesets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Changesets rename(Name name) {
        return new Changesets(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, OffsetDateTime, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
