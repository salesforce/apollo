/*
 * This file is generated by jOOQ.
 */
package com.apollo.qdb.quantumdbSchema.tables;


import com.apollo.qdb.quantumdbSchema.Keys;
import com.apollo.qdb.quantumdbSchema.Quantumdb;
import com.apollo.qdb.quantumdbSchema.tables.records.RefVersionsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RefVersions extends TableImpl<RefVersionsRecord> {

    private static final long serialVersionUID = 2075842268;

    /**
     * The reference instance of <code>QUANTUMDB.REF_VERSIONS</code>
     */
    public static final RefVersions REF_VERSIONS = new RefVersions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RefVersionsRecord> getRecordType() {
        return RefVersionsRecord.class;
    }

    /**
     * The column <code>QUANTUMDB.REF_VERSIONS.REF_ID</code>.
     */
    public final TableField<RefVersionsRecord, String> REF_ID = createField(DSL.name("REF_ID"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>QUANTUMDB.REF_VERSIONS.VERSION_ID</code>.
     */
    public final TableField<RefVersionsRecord, String> VERSION_ID = createField(DSL.name("VERSION_ID"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>QUANTUMDB.REF_VERSIONS.TABLE_NAME</code>.
     */
    public final TableField<RefVersionsRecord, String> TABLE_NAME = createField(DSL.name("TABLE_NAME"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>QUANTUMDB.REF_VERSIONS</code> table reference
     */
    public RefVersions() {
        this(DSL.name("REF_VERSIONS"), null);
    }

    /**
     * Create an aliased <code>QUANTUMDB.REF_VERSIONS</code> table reference
     */
    public RefVersions(String alias) {
        this(DSL.name(alias), REF_VERSIONS);
    }

    /**
     * Create an aliased <code>QUANTUMDB.REF_VERSIONS</code> table reference
     */
    public RefVersions(Name alias) {
        this(alias, REF_VERSIONS);
    }

    private RefVersions(Name alias, Table<RefVersionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private RefVersions(Name alias, Table<RefVersionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> RefVersions(Table<O> child, ForeignKey<O, RefVersionsRecord> key) {
        super(child, key, REF_VERSIONS);
    }

    @Override
    public Schema getSchema() {
        return Quantumdb.QUANTUMDB;
    }

    @Override
    public UniqueKey<RefVersionsRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_22;
    }

    @Override
    public List<UniqueKey<RefVersionsRecord>> getKeys() {
        return Arrays.<UniqueKey<RefVersionsRecord>>asList(Keys.CONSTRAINT_22);
    }

    @Override
    public List<ForeignKey<RefVersionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RefVersionsRecord, ?>>asList(Keys.REF_VERSIONS_REF_ID, Keys.REF_VERSIONS_VERSION_ID);
    }

    public Refs refs() {
        return new Refs(this, Keys.REF_VERSIONS_REF_ID);
    }

    public Changelog changelog() {
        return new Changelog(this, Keys.REF_VERSIONS_VERSION_ID);
    }

    @Override
    public RefVersions as(String alias) {
        return new RefVersions(DSL.name(alias), this);
    }

    @Override
    public RefVersions as(Name alias) {
        return new RefVersions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RefVersions rename(String name) {
        return new RefVersions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RefVersions rename(Name name) {
        return new RefVersions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
