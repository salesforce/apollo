/*
 * This file is generated by jOOQ.
 */
package com.apollo.qdb.quantumdbSchema.tables;


import com.apollo.qdb.quantumdbSchema.Keys;
import com.apollo.qdb.quantumdbSchema.Quantumdb;
import com.apollo.qdb.quantumdbSchema.tables.records.SynchronizerColumnsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SynchronizerColumns extends TableImpl<SynchronizerColumnsRecord> {

    private static final long serialVersionUID = -1128896707;

    /**
     * The reference instance of <code>QUANTUMDB.SYNCHRONIZER_COLUMNS</code>
     */
    public static final SynchronizerColumns SYNCHRONIZER_COLUMNS = new SynchronizerColumns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SynchronizerColumnsRecord> getRecordType() {
        return SynchronizerColumnsRecord.class;
    }

    /**
     * The column <code>QUANTUMDB.SYNCHRONIZER_COLUMNS.SYNCHRONIZER_ID</code>.
     */
    public final TableField<SynchronizerColumnsRecord, Long> SYNCHRONIZER_ID = createField(DSL.name("SYNCHRONIZER_ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>QUANTUMDB.SYNCHRONIZER_COLUMNS.COLUMN_MAPPING_ID</code>.
     */
    public final TableField<SynchronizerColumnsRecord, Long> COLUMN_MAPPING_ID = createField(DSL.name("COLUMN_MAPPING_ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>QUANTUMDB.SYNCHRONIZER_COLUMNS</code> table reference
     */
    public SynchronizerColumns() {
        this(DSL.name("SYNCHRONIZER_COLUMNS"), null);
    }

    /**
     * Create an aliased <code>QUANTUMDB.SYNCHRONIZER_COLUMNS</code> table reference
     */
    public SynchronizerColumns(String alias) {
        this(DSL.name(alias), SYNCHRONIZER_COLUMNS);
    }

    /**
     * Create an aliased <code>QUANTUMDB.SYNCHRONIZER_COLUMNS</code> table reference
     */
    public SynchronizerColumns(Name alias) {
        this(alias, SYNCHRONIZER_COLUMNS);
    }

    private SynchronizerColumns(Name alias, Table<SynchronizerColumnsRecord> aliased) {
        this(alias, aliased, null);
    }

    private SynchronizerColumns(Name alias, Table<SynchronizerColumnsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> SynchronizerColumns(Table<O> child, ForeignKey<O, SynchronizerColumnsRecord> key) {
        super(child, key, SYNCHRONIZER_COLUMNS);
    }

    @Override
    public Schema getSchema() {
        return Quantumdb.QUANTUMDB;
    }

    @Override
    public Identity<SynchronizerColumnsRecord, Long> getIdentity() {
        return Keys.IDENTITY_SYNCHRONIZER_COLUMNS;
    }

    @Override
    public UniqueKey<SynchronizerColumnsRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_3;
    }

    @Override
    public List<UniqueKey<SynchronizerColumnsRecord>> getKeys() {
        return Arrays.<UniqueKey<SynchronizerColumnsRecord>>asList(Keys.CONSTRAINT_3);
    }

    @Override
    public List<ForeignKey<SynchronizerColumnsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SynchronizerColumnsRecord, ?>>asList(Keys.SYNCHRONIZER_COLUMNS_SYNCHRONIZER_ID, Keys.SYNCHRONIZER_COLUMNS_COLUMN_MAPPING_ID);
    }

    public Synchronizers synchronizers() {
        return new Synchronizers(this, Keys.SYNCHRONIZER_COLUMNS_SYNCHRONIZER_ID);
    }

    public ColumnMappings columnMappings() {
        return new ColumnMappings(this, Keys.SYNCHRONIZER_COLUMNS_COLUMN_MAPPING_ID);
    }

    @Override
    public SynchronizerColumns as(String alias) {
        return new SynchronizerColumns(DSL.name(alias), this);
    }

    @Override
    public SynchronizerColumns as(Name alias) {
        return new SynchronizerColumns(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SynchronizerColumns rename(String name) {
        return new SynchronizerColumns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SynchronizerColumns rename(Name name) {
        return new SynchronizerColumns(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
