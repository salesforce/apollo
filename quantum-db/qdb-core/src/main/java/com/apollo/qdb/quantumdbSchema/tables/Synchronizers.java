/*
 * This file is generated by jOOQ.
 */
package com.apollo.qdb.quantumdbSchema.tables;


import com.apollo.qdb.quantumdbSchema.Keys;
import com.apollo.qdb.quantumdbSchema.Quantumdb;
import com.apollo.qdb.quantumdbSchema.tables.records.SynchronizersRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Synchronizers extends TableImpl<SynchronizersRecord> {

    private static final long serialVersionUID = 1634637157;

    /**
     * The reference instance of <code>QUANTUMDB.SYNCHRONIZERS</code>
     */
    public static final Synchronizers SYNCHRONIZERS = new Synchronizers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SynchronizersRecord> getRecordType() {
        return SynchronizersRecord.class;
    }

    /**
     * The column <code>QUANTUMDB.SYNCHRONIZERS.ID</code>.
     */
    public final TableField<SynchronizersRecord, Long> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>QUANTUMDB.SYNCHRONIZERS.SOURCE_REF_ID</code>.
     */
    public final TableField<SynchronizersRecord, String> SOURCE_REF_ID = createField(DSL.name("SOURCE_REF_ID"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>QUANTUMDB.SYNCHRONIZERS.TARGET_REF_ID</code>.
     */
    public final TableField<SynchronizersRecord, String> TARGET_REF_ID = createField(DSL.name("TARGET_REF_ID"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>QUANTUMDB.SYNCHRONIZERS.FUNCTION_NAME</code>.
     */
    public final TableField<SynchronizersRecord, String> FUNCTION_NAME = createField(DSL.name("FUNCTION_NAME"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>QUANTUMDB.SYNCHRONIZERS.TRIGGER_NAME</code>.
     */
    public final TableField<SynchronizersRecord, String> TRIGGER_NAME = createField(DSL.name("TRIGGER_NAME"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>QUANTUMDB.SYNCHRONIZERS</code> table reference
     */
    public Synchronizers() {
        this(DSL.name("SYNCHRONIZERS"), null);
    }

    /**
     * Create an aliased <code>QUANTUMDB.SYNCHRONIZERS</code> table reference
     */
    public Synchronizers(String alias) {
        this(DSL.name(alias), SYNCHRONIZERS);
    }

    /**
     * Create an aliased <code>QUANTUMDB.SYNCHRONIZERS</code> table reference
     */
    public Synchronizers(Name alias) {
        this(alias, SYNCHRONIZERS);
    }

    private Synchronizers(Name alias, Table<SynchronizersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Synchronizers(Name alias, Table<SynchronizersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Synchronizers(Table<O> child, ForeignKey<O, SynchronizersRecord> key) {
        super(child, key, SYNCHRONIZERS);
    }

    @Override
    public Schema getSchema() {
        return Quantumdb.QUANTUMDB;
    }

    @Override
    public Identity<SynchronizersRecord, Long> getIdentity() {
        return Keys.IDENTITY_SYNCHRONIZERS;
    }

    @Override
    public UniqueKey<SynchronizersRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_23;
    }

    @Override
    public List<UniqueKey<SynchronizersRecord>> getKeys() {
        return Arrays.<UniqueKey<SynchronizersRecord>>asList(Keys.CONSTRAINT_23, Keys.SYNCHRONIZERS_SOURCE_TARGET_UNIQUENESS, Keys.SYNCHRONIZERS_UNIQUE_FUNCTION_NAME, Keys.SYNCHRONIZERS_UNIQUE_TRIGGER_NAME);
    }

    @Override
    public List<ForeignKey<SynchronizersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SynchronizersRecord, ?>>asList(Keys.SYNCHRONIZERS_SOURCE_REF_ID, Keys.SYNCHRONIZERS_TARGET_REF_ID);
    }

    public Refs synchronizersSourceRefId() {
        return new Refs(this, Keys.SYNCHRONIZERS_SOURCE_REF_ID);
    }

    public Refs synchronizersTargetRefId() {
        return new Refs(this, Keys.SYNCHRONIZERS_TARGET_REF_ID);
    }

    @Override
    public Synchronizers as(String alias) {
        return new Synchronizers(DSL.name(alias), this);
    }

    @Override
    public Synchronizers as(Name alias) {
        return new Synchronizers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Synchronizers rename(String name) {
        return new Synchronizers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Synchronizers rename(Name name) {
        return new Synchronizers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
