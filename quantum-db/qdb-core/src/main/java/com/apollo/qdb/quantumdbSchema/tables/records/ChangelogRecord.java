/*
 * This file is generated by jOOQ.
 */
package com.apollo.qdb.quantumdbSchema.tables.records;


import com.apollo.qdb.quantumdbSchema.tables.Changelog;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChangelogRecord extends UpdatableRecordImpl<ChangelogRecord> implements Record4<String, String, String, String> {

    private static final long serialVersionUID = 1995046921;

    /**
     * Setter for <code>QUANTUMDB.CHANGELOG.VERSION_ID</code>.
     */
    public void setVersionId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>QUANTUMDB.CHANGELOG.VERSION_ID</code>.
     */
    public String getVersionId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>QUANTUMDB.CHANGELOG.PARENT_VERSION_ID</code>.
     */
    public void setParentVersionId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>QUANTUMDB.CHANGELOG.PARENT_VERSION_ID</code>.
     */
    public String getParentVersionId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>QUANTUMDB.CHANGELOG.OPERATION_TYPE</code>.
     */
    public void setOperationType(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>QUANTUMDB.CHANGELOG.OPERATION_TYPE</code>.
     */
    public String getOperationType() {
        return (String) get(2);
    }

    /**
     * Setter for <code>QUANTUMDB.CHANGELOG.OPERATION</code>.
     */
    public void setOperation(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>QUANTUMDB.CHANGELOG.OPERATION</code>.
     */
    public String getOperation() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Changelog.CHANGELOG.VERSION_ID;
    }

    @Override
    public Field<String> field2() {
        return Changelog.CHANGELOG.PARENT_VERSION_ID;
    }

    @Override
    public Field<String> field3() {
        return Changelog.CHANGELOG.OPERATION_TYPE;
    }

    @Override
    public Field<String> field4() {
        return Changelog.CHANGELOG.OPERATION;
    }

    @Override
    public String component1() {
        return getVersionId();
    }

    @Override
    public String component2() {
        return getParentVersionId();
    }

    @Override
    public String component3() {
        return getOperationType();
    }

    @Override
    public String component4() {
        return getOperation();
    }

    @Override
    public String value1() {
        return getVersionId();
    }

    @Override
    public String value2() {
        return getParentVersionId();
    }

    @Override
    public String value3() {
        return getOperationType();
    }

    @Override
    public String value4() {
        return getOperation();
    }

    @Override
    public ChangelogRecord value1(String value) {
        setVersionId(value);
        return this;
    }

    @Override
    public ChangelogRecord value2(String value) {
        setParentVersionId(value);
        return this;
    }

    @Override
    public ChangelogRecord value3(String value) {
        setOperationType(value);
        return this;
    }

    @Override
    public ChangelogRecord value4(String value) {
        setOperation(value);
        return this;
    }

    @Override
    public ChangelogRecord values(String value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ChangelogRecord
     */
    public ChangelogRecord() {
        super(Changelog.CHANGELOG);
    }

    /**
     * Create a detached, initialised ChangelogRecord
     */
    public ChangelogRecord(String versionId, String parentVersionId, String operationType, String operation) {
        super(Changelog.CHANGELOG);

        set(0, versionId);
        set(1, parentVersionId);
        set(2, operationType);
        set(3, operation);
    }
}
