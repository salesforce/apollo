/*
 * This file is generated by jOOQ.
 */
package com.apollo.qdb.quantumdbSchema.tables.records;


import com.apollo.qdb.quantumdbSchema.tables.ColumnMappings;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ColumnMappingsRecord extends UpdatableRecordImpl<ColumnMappingsRecord> implements Record3<Long, Long, Long> {

    private static final long serialVersionUID = -861074529;

    /**
     * Setter for <code>QUANTUMDB.COLUMN_MAPPINGS.ID</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>QUANTUMDB.COLUMN_MAPPINGS.ID</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>QUANTUMDB.COLUMN_MAPPINGS.SOURCE_COLUMN_ID</code>.
     */
    public void setSourceColumnId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>QUANTUMDB.COLUMN_MAPPINGS.SOURCE_COLUMN_ID</code>.
     */
    public Long getSourceColumnId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>QUANTUMDB.COLUMN_MAPPINGS.TARGET_COLUMN_ID</code>.
     */
    public void setTargetColumnId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>QUANTUMDB.COLUMN_MAPPINGS.TARGET_COLUMN_ID</code>.
     */
    public Long getTargetColumnId() {
        return (Long) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Long, Long> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return ColumnMappings.COLUMN_MAPPINGS.ID;
    }

    @Override
    public Field<Long> field2() {
        return ColumnMappings.COLUMN_MAPPINGS.SOURCE_COLUMN_ID;
    }

    @Override
    public Field<Long> field3() {
        return ColumnMappings.COLUMN_MAPPINGS.TARGET_COLUMN_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getSourceColumnId();
    }

    @Override
    public Long component3() {
        return getTargetColumnId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getSourceColumnId();
    }

    @Override
    public Long value3() {
        return getTargetColumnId();
    }

    @Override
    public ColumnMappingsRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public ColumnMappingsRecord value2(Long value) {
        setSourceColumnId(value);
        return this;
    }

    @Override
    public ColumnMappingsRecord value3(Long value) {
        setTargetColumnId(value);
        return this;
    }

    @Override
    public ColumnMappingsRecord values(Long value1, Long value2, Long value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ColumnMappingsRecord
     */
    public ColumnMappingsRecord() {
        super(ColumnMappings.COLUMN_MAPPINGS);
    }

    /**
     * Create a detached, initialised ColumnMappingsRecord
     */
    public ColumnMappingsRecord(Long id, Long sourceColumnId, Long targetColumnId) {
        super(ColumnMappings.COLUMN_MAPPINGS);

        set(0, id);
        set(1, sourceColumnId);
        set(2, targetColumnId);
    }
}
