/*
 * This file is generated by jOOQ.
 */
package com.apollo.qdb.quantumdbSchema.tables.records;


import com.apollo.qdb.quantumdbSchema.tables.SynchronizerColumns;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SynchronizerColumnsRecord extends UpdatableRecordImpl<SynchronizerColumnsRecord> implements Record2<Long, Long> {

    private static final long serialVersionUID = -1675109808;

    /**
     * Setter for <code>QUANTUMDB.SYNCHRONIZER_COLUMNS.SYNCHRONIZER_ID</code>.
     */
    public void setSynchronizerId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>QUANTUMDB.SYNCHRONIZER_COLUMNS.SYNCHRONIZER_ID</code>.
     */
    public Long getSynchronizerId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>QUANTUMDB.SYNCHRONIZER_COLUMNS.COLUMN_MAPPING_ID</code>.
     */
    public void setColumnMappingId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>QUANTUMDB.SYNCHRONIZER_COLUMNS.COLUMN_MAPPING_ID</code>.
     */
    public Long getColumnMappingId() {
        return (Long) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Long, Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Long, Long> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return SynchronizerColumns.SYNCHRONIZER_COLUMNS.SYNCHRONIZER_ID;
    }

    @Override
    public Field<Long> field2() {
        return SynchronizerColumns.SYNCHRONIZER_COLUMNS.COLUMN_MAPPING_ID;
    }

    @Override
    public Long component1() {
        return getSynchronizerId();
    }

    @Override
    public Long component2() {
        return getColumnMappingId();
    }

    @Override
    public Long value1() {
        return getSynchronizerId();
    }

    @Override
    public Long value2() {
        return getColumnMappingId();
    }

    @Override
    public SynchronizerColumnsRecord value1(Long value) {
        setSynchronizerId(value);
        return this;
    }

    @Override
    public SynchronizerColumnsRecord value2(Long value) {
        setColumnMappingId(value);
        return this;
    }

    @Override
    public SynchronizerColumnsRecord values(Long value1, Long value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SynchronizerColumnsRecord
     */
    public SynchronizerColumnsRecord() {
        super(SynchronizerColumns.SYNCHRONIZER_COLUMNS);
    }

    /**
     * Create a detached, initialised SynchronizerColumnsRecord
     */
    public SynchronizerColumnsRecord(Long synchronizerId, Long columnMappingId) {
        super(SynchronizerColumns.SYNCHRONIZER_COLUMNS);

        set(0, synchronizerId);
        set(1, columnMappingId);
    }
}
