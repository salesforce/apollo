// Generated by delombok at Thu Mar 11 18:53:07 PST 2021
package io.quantumdb.core.schema.definitions;

import static com.google.common.base.Preconditions.checkArgument;
import java.util.List;
import java.util.Set;
import com.google.common.base.Strings;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;

public class Column implements Copyable<Column> {

	public static enum Hint {
		NOT_NULL, AUTO_INCREMENT, IDENTITY;
	}

	private String name;
	private Table parent;
	private ColumnType type;
	private String defaultValue;
	private final Set<Hint> hints;
	private ForeignKey outgoingForeignKey;
	private Sequence sequence;
	private final List<ForeignKey> incomingForeignKeys;

	public Column(String name, ColumnType type, Hint... hints) {
		this(name, type, null, null, hints);
	}

	public Column(String name, ColumnType type, String defaultValue, Hint... hints) {
		this(name, type, null, defaultValue, hints);
	}

	public Column(String name, ColumnType type, Sequence sequence, Hint... hints) {
		this(name, type, sequence, null, hints);
	}

	private Column(String name, ColumnType type, Sequence sequence, String defaultValueExpression, Hint... hints) {
		checkArgument(!Strings.isNullOrEmpty(name), "You must specify a \'name\'.");
		checkArgument(type != null, "You must specify a \'type\'.");
		checkArgument(hints != null, "You may not specify \'hints\' as NULL.");
		for (Hint hint : hints) {
			checkArgument(hint != null, "You cannot add NULL as a hint.");
		}
		this.name = name;
		this.type = type;
		this.sequence = sequence;
		this.defaultValue = defaultValueExpression;
		this.hints = Sets.newHashSet(hints);
		this.incomingForeignKeys = Lists.newArrayList();
	}

	void setParent(Table parent) {
		this.parent = parent;
	}

	public void modifyType(ColumnType newColumnType) {
		this.type = newColumnType;
	}

	public void dropDefaultValue() {
		this.defaultValue = null;
		this.sequence = null;
		this.hints.remove(Hint.AUTO_INCREMENT);
	}

	public void modifyDefaultValue(String defaultValue) {
		this.defaultValue = defaultValue;
		this.sequence = null;
		this.hints.remove(Hint.AUTO_INCREMENT);
	}

	public void modifyDefaultValue(Sequence sequence) {
		this.hints.add(Hint.AUTO_INCREMENT);
		this.sequence = sequence;
		this.defaultValue = null;
	}

	public boolean isIdentity() {
		return hints.contains(Hint.IDENTITY);
	}

	public boolean isAutoIncrement() {
		return hints.contains(Hint.AUTO_INCREMENT);
	}

	public boolean isNotNull() {
		return hints.contains(Hint.NOT_NULL);
	}

	public void addHint(Hint hint) {
		hints.add(hint);
	}

	public void dropHint(Hint hint) {
		hints.remove(hint);
	}

	public Column rename(String newName) {
		checkArgument(!Strings.isNullOrEmpty(newName), "You must specify a \'name\'.");
		if (parent != null) {
			checkArgument(!parent.containsColumn(newName), "Table: " + parent.getName() + " already contains column with name: " + newName);
		}
		this.name = newName;
		return this;
	}

	@Override
	public Column copy() {
		return new Column(name, type, sequence, defaultValue, hints.stream().toArray(Hint[]::new));
	}

	@Override
	public String toString() {
		return PrettyPrinter.prettyPrint(this);
	}

	@java.lang.SuppressWarnings("all")
	public String getName() {
		return this.name;
	}

	@java.lang.SuppressWarnings("all")
	public Table getParent() {
		return this.parent;
	}

	@java.lang.SuppressWarnings("all")
	public ColumnType getType() {
		return this.type;
	}

	@java.lang.SuppressWarnings("all")
	public String getDefaultValue() {
		return this.defaultValue;
	}

	@java.lang.SuppressWarnings("all")
	public Set<Hint> getHints() {
		return this.hints;
	}

	@java.lang.SuppressWarnings("all")
	public ForeignKey getOutgoingForeignKey() {
		return this.outgoingForeignKey;
	}

	@java.lang.SuppressWarnings("all")
	public Sequence getSequence() {
		return this.sequence;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof Column)) return false;
		final Column other = (Column) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		final java.lang.Object this$name = this.getName();
		final java.lang.Object other$name = other.getName();
		if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
		final java.lang.Object this$type = this.getType();
		final java.lang.Object other$type = other.getType();
		if (this$type == null ? other$type != null : !this$type.equals(other$type)) return false;
		final java.lang.Object this$defaultValue = this.getDefaultValue();
		final java.lang.Object other$defaultValue = other.getDefaultValue();
		if (this$defaultValue == null ? other$defaultValue != null : !this$defaultValue.equals(other$defaultValue)) return false;
		final java.lang.Object this$hints = this.getHints();
		final java.lang.Object other$hints = other.getHints();
		if (this$hints == null ? other$hints != null : !this$hints.equals(other$hints)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof Column;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		final java.lang.Object $name = this.getName();
		result = result * PRIME + ($name == null ? 43 : $name.hashCode());
		final java.lang.Object $type = this.getType();
		result = result * PRIME + ($type == null ? 43 : $type.hashCode());
		final java.lang.Object $defaultValue = this.getDefaultValue();
		result = result * PRIME + ($defaultValue == null ? 43 : $defaultValue.hashCode());
		final java.lang.Object $hints = this.getHints();
		result = result * PRIME + ($hints == null ? 43 : $hints.hashCode());
		return result;
	}

	@java.lang.SuppressWarnings("all")
	protected void setOutgoingForeignKey(final ForeignKey outgoingForeignKey) {
		this.outgoingForeignKey = outgoingForeignKey;
	}

	@java.lang.SuppressWarnings("all")
	protected void setSequence(final Sequence sequence) {
		this.sequence = sequence;
	}

	@java.lang.SuppressWarnings("all")
	protected List<ForeignKey> getIncomingForeignKeys() {
		return this.incomingForeignKeys;
	}
}
