// Generated by delombok at Thu Mar 11 18:53:07 PST 2021
package io.quantumdb.core.schema.operations;

import static com.google.common.base.Preconditions.checkArgument;
import java.util.Arrays;
import com.google.common.base.Strings;
import io.quantumdb.core.schema.definitions.Column;
import io.quantumdb.core.schema.definitions.ColumnType;

public class ColumnDefinition {
	private final String name;
	private final ColumnType type;
	private final String defaultValueExpression;
	private final Column.Hint[] hints;

	private ColumnDefinition() {
		this.name = null;
		this.type = null;
		this.defaultValueExpression = null;
		this.hints = new Column.Hint[0];
	}

	ColumnDefinition(String name, ColumnType type, Column.Hint... hints) {
		this(name, type, null, hints);
	}

	ColumnDefinition(String name, ColumnType type, String defaultValueExpression, Column.Hint... hints) {
		checkArgument(!Strings.isNullOrEmpty(name), "You must specify a \'name\'.");
		checkArgument(type != null, "You must specify a \'type\'.");
		checkArgument(hints != null, "You may not specify \'hints\' as NULL.");
		for (Column.Hint hint : hints) {
			checkArgument(hint != null, "You cannot add NULL as a hint.");
		}
		this.name = name;
		this.type = type;
		this.defaultValueExpression = defaultValueExpression;
		this.hints = hints;
	}

	public boolean isIdentity() {
		return containsHint(Column.Hint.IDENTITY);
	}

	public boolean isAutoIncrement() {
		return containsHint(Column.Hint.AUTO_INCREMENT);
	}

	public boolean isNotNull() {
		return containsHint(Column.Hint.NOT_NULL);
	}

	private boolean containsHint(Column.Hint needle) {
		return Arrays.stream(hints).filter(hint -> hint == needle).findFirst().isPresent();
	}

	public Column createColumn() {
		return new Column(name, type, defaultValueExpression, hints);
	}

	@java.lang.SuppressWarnings("all")
	public String getName() {
		return this.name;
	}

	@java.lang.SuppressWarnings("all")
	public ColumnType getType() {
		return this.type;
	}

	@java.lang.SuppressWarnings("all")
	public String getDefaultValueExpression() {
		return this.defaultValueExpression;
	}

	@java.lang.SuppressWarnings("all")
	public Column.Hint[] getHints() {
		return this.hints;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof ColumnDefinition)) return false;
		final ColumnDefinition other = (ColumnDefinition) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		final java.lang.Object this$name = this.getName();
		final java.lang.Object other$name = other.getName();
		if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
		final java.lang.Object this$type = this.getType();
		final java.lang.Object other$type = other.getType();
		if (this$type == null ? other$type != null : !this$type.equals(other$type)) return false;
		final java.lang.Object this$defaultValueExpression = this.getDefaultValueExpression();
		final java.lang.Object other$defaultValueExpression = other.getDefaultValueExpression();
		if (this$defaultValueExpression == null ? other$defaultValueExpression != null : !this$defaultValueExpression.equals(other$defaultValueExpression)) return false;
		if (!java.util.Arrays.deepEquals(this.getHints(), other.getHints())) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof ColumnDefinition;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		final java.lang.Object $name = this.getName();
		result = result * PRIME + ($name == null ? 43 : $name.hashCode());
		final java.lang.Object $type = this.getType();
		result = result * PRIME + ($type == null ? 43 : $type.hashCode());
		final java.lang.Object $defaultValueExpression = this.getDefaultValueExpression();
		result = result * PRIME + ($defaultValueExpression == null ? 43 : $defaultValueExpression.hashCode());
		result = result * PRIME + java.util.Arrays.deepHashCode(this.getHints());
		return result;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public java.lang.String toString() {
		return "ColumnDefinition(name=" + this.getName() + ", type=" + this.getType() + ", defaultValueExpression=" + this.getDefaultValueExpression() + ", hints=" + java.util.Arrays.deepToString(this.getHints()) + ")";
	}
}
