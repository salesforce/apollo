// Generated by delombok at Thu Mar 11 18:55:40 PST 2021
package io.quantumdb.core.backends;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Optional;
import java.util.UUID;

import io.quantumdb.core.utils.RandomHasher;

public class PostgresqlDatabase {
    
    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(PostgresqlDatabase.class);
    private String                        catalogName;
    private Connection                    connection;
    private String                        jdbcDriver;
    private String                        jdbcPass;
    private String                        jdbcUrl;
    private String                        jdbcUser;

    public void after() throws Exception {
        try {
            if (connection != null) {
                connection.close();
//                try (Connection conn = DriverManager.getConnection(jdbcUrl + "/" + jdbcUser, jdbcUser, jdbcPass)) {
//                    conn.createStatement()
//                        .execute("SELECT COUNT(pg_terminate_backend(pg_stat_activity.pid))" + "FROM pg_stat_activity "
//                                + "WHERE pg_stat_activity.datname = \'" + catalogName + "\' "
//                                + "AND usename = current_user " + "AND pid <> pg_backend_pid();");
//                    conn.createStatement().execute("DROP DATABASE " + catalogName + ";");
//                }
            }
        } catch (final java.lang.Throwable $ex) {
            throw new IllegalStateException($ex);
        }
    }

    public void before() throws Exception {
        this.jdbcDriver = getProperty("jdbc.driver").orElse("org.h2.Driver");
        this.jdbcUrl = getProperty("jdbc.url").orElse(String.format("jdbc:h2:mem:%s;DB_CLOSE_DELAY=-1;TRACE_LEVEL_SYSTEM_OUT=2", UUID.randomUUID()));
        this.jdbcUser = getProperty("jdbc.user", "PG_USER").orElse(null);
        this.jdbcPass = getProperty("jdbc.pass", "PG_PASSWORD").orElse(null);
//        assumeTrue(jdbcUser != null, "No \'jdbc.user\' or \'PG_USER\' specified");
//        assumeTrue(jdbcPass != null, "No \'jdbc.pass\' or \'PG_PASSWORD\' specified");
        this.catalogName = "db_" + RandomHasher.generateHash();
        try (Connection conn = DriverManager.getConnection(jdbcUrl + "/" + jdbcUser, jdbcUser, jdbcPass)) {
//            conn.createStatement().execute("DROP DATABASE IF EXISTS " + catalogName + ";");
//            conn.createStatement().execute("CREATE DATABASE " + catalogName + ";");
            log.info("Running test on database: " + catalogName);
        }
        this.connection = createConnection();
    }

    public Connection createConnection() throws SQLException {
        return DriverManager.getConnection(jdbcUrl, jdbcUser, jdbcPass);
    }

    
    public String getCatalogName() {
        return this.catalogName;
    }

    
    public Connection getConnection() {
        return this.connection;
    }

    
    public String getJdbcDriver() {
        return this.jdbcDriver;
    }

    
    public String getJdbcPass() {
        return this.jdbcPass;
    }

    
    public String getJdbcUrl() {
        return this.jdbcUrl;
    }

    
    public String getJdbcUser() {
        return this.jdbcUser;
    }

    public Optional<String> getProperty(String... keys) {
        for (String key : keys) {
            String property = System.getProperty(key);
            if (property != null) {
                return Optional.of(property);
            }
            property = System.getenv(key);
            if (property != null) {
                return Optional.of(property);
            }
        }
        return Optional.empty();
    }
}
