syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.salesfoce.apollo.stereotomy.event.proto";
option java_outer_classname = "StereotomyProto";
option objc_class_prefix = "Stereo";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/duration.proto";
import "util.proto";

package stereotomy;

message Ident {
    oneof type {
        utils.PubKey basic = 1;
        utils.Digeste selfAddressing = 2;
        utils.Sig selfSigning = 3;
        AID autonomous = 4;
        bool NONE = 5;
    }
}
message EventCoords {
    Ident identifier = 1;
    int64 sequenceNumber = 2;
    string ilk = 3;
    utils.Digeste digest = 4;
}

message EventLoc {
    Ident identifier = 1;
    int64 sequenceNumber = 2;
    utils.Digeste digest = 3;
}

message DelegatingEventCoords {
    Ident identifier = 1;
    int64 sequenceNumber = 2;
    EventCoords previous = 3;
    string ilk = 4;
}

message KeyCoords {
    EventCoords establishment = 1;
    int32 keyIndex = 2;
}

message Sealed {
    oneof type {
        EventCoords eventCoordinates = 1;
        DelegatingEventCoords delegatingLocation = 2;
        utils.Digeste digest = 3;
        EventLoc event = 4;
        bytes bits = 5;
    }
}

message AID {
    Ident prefix = 1;
    string url = 2;
}

message Header {
    int64 sequenceNumber = 1;
    Ident identifier = 2;
    utils.Digeste priorEventDigest = 3;
    Version version = 4;
    string ilk = 5;
}

message EventCommon {
    utils.Digeste configuration = 2;
    EventCoords previous = 3;
    map<int32, utils.Sig> authentication = 4;
}

message InteractionEvent {
    InteractionSpec specification = 1;
    EventCommon common = 2;
}

message InteractionSpec {
    Header header = 1;
    repeated Sealed seals = 2;
}

message AttachmentEvent {
    Header header = 1;
    EventCommon common = 2;
    EventCoords coordinates = 3;
    map<int32, utils.Sig> endorsements = 5; 
    repeated Receipt receipts = 6;
}

message Establishment {
    SigningThreshold signingThreshold = 1;
    repeated utils.PubKey keys = 2;
    utils.Digeste nextKeysDigest = 3;
    int32 witnessThreshold = 4;
}

message RotationEvent {
    RotationSpec specification = 1; 
    EventCommon common = 2;
    Sealed delegatingSeal = 3; // Delegated rotation event
}

message RotationSpec {
    Header header = 1;
    Establishment establishment = 2;
    repeated Ident witnessesRemoved = 3;
    repeated Ident witnessesAdded = 41;
    repeated Sealed seals = 5;
}

message InceptionEvent {
    IdentifierSpec specification = 1;
    EventCommon common = 2;
    DelegatingEventCoords delegatingEvent = 3;
    Ident identifier = 4;
    Sealed delegatingSeal = 5; // Delegated inception event
}

message IdentifierSpec {
    Header header = 1;
    Establishment establishment = 2;
    repeated Ident witnesses = 3;
    repeated string configuration = 4;
}

message Receipt {
    EventCoords coordinates = 1;
    map<int32, utils.Sig> signatures = 2;
}

message Weight {
    int32 denominator = 1;
    int32 numerator = 2;
}

message Weights {
    repeated Weight weights = 1;
}

message SigningThreshold {
    int32 threshold = 1;
    repeated Weights weights = 2;
}

message Version {
    string format = 1;
    int32 major = 2;
    int32 minor = 3;
}

message KeyState {
    Ident identifier = 1;
    utils.Digeste digest = 2;
    EventCoords coordinates = 3;
    EventCoords lastEvent = 4;
    EventCoords lastEstablishmentEvent = 5;
    Ident delegatingIdentifier = 6;
    repeated utils.PubKey keys = 7;
    utils.Digeste nextKeyConfigurationDigest = 8;
    repeated string configurationTraits = 9;
    SigningThreshold signingThreshold = 10;
    repeated Ident witnesses = 11;
    int32 witnessThreshold = 12;
}

message Signatures {
    map<int32, utils.Sig> signatures = 1;
}

/** Services **/

service Witness {
    rpc testify(Statements) returns (Attachments) {}
}

service KerlSource {
    rpc query(KerlQuery) returns (KerlResults) {}
}

service Resolver { 
    rpc lookup (Resolve) returns (Bound) {}
    rpc resolve (Resolve) returns (KeyState) {}
    rpc bind(Binding) returns (google.protobuf.Empty) {}
}

service Validator {
    rpc validate(KerlQuery) returns (Validations) {}
}

service DirectValidator {
    rpc direct(Statements) returns (google.protobuf.Empty) {}
}

message Statements {
    utils.Digeste context = 1;
    repeated KeyEvent events = 2;
}

message KerlQuery {
    utils.Digeste context = 1;
    repeated bytes query = 2;
}

message Events {
    repeated KeyEvent requested = 1;
}

message KeyEvent {
    oneof event {
        InceptionEvent inception = 1;
        RotationEvent rotation = 2;
        InteractionEvent interaction = 3;
    }
}

message Validations {
    repeated Validation validations = 1;
}

message Validation {
    utils.Digeste hash = 1;
    bytes validation = 2;
}

message Attachments {
    repeated AttachmentEvent requested = 1;
}

message Resolve {
    utils.Digeste context = 1;
    Ident identifier = 2;
    google.protobuf.Duration timeout = 3;
}

message Binding {
    utils.Digeste context = 1;
    Bound binding = 2;
    google.protobuf.Duration timeout = 3;
}

message Bound {
    Ident prefix = 1;
    google.protobuf.Any value = 2;
    utils.Sig signature = 3;
    bool timeout = 4;
}

message KerlResults {
    repeated KeyEvent events = 1;
    repeated AttachmentEvent attachments = 2;
}